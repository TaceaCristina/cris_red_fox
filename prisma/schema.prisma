generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  address       String?
  role          Role        @default(USER)
  active        Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  bookings      Booking[]
  instructor    Instructor?
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Booking {
  id            String        @id @default(cuid())
  address       String?
  date          DateTime
  times         DateTime[]
  bookingNumber String
  cost          Float         @default(0)
  paymentToken  String?
  paymentMethod PaymentMethod
  paid          Boolean       @default(false)
  type          LessonType    @default(DRIVING)
  status        BookingStatus @default(PENDING)
  userId        String
  instructorId  String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  instructor    Instructor    @relation(fields: [instructorId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([instructorId])
}

model Instructor {
  id           String      @id @default(cuid())
  userId       String      @unique
  name         String
  email        String?
  phone        String?
  slug         String      @unique
  img          String?
  certificate  String?
  experience   String?
  transmission String
  active       Boolean     @default(true)
  bio          String?
  rating       Float?      @default(4.9)
  ratingCount  Int?        @default(10)
  location     String?
  services     String?
  dcost        Int?        @default(0)
  lcost        Int?        @default(0)
  areas        String[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  bookings     Booking[]
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeslots    TimeSlots[]
}

model TimeSlots {
  id           String     @id @default(cuid())
  type         LessonType @default(DRIVING)
  date         DateTime
  times        DateTime[]
  instructorId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  instructor   Instructor @relation(fields: [instructorId], references: [id])

  @@index([instructorId])
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum LessonType {
  DRIVING
  LEARNERS
}

enum PaymentMethod {
  CARD
  CASH
}

enum BookingStatus {
  PENDING
  CANCELLED
  COMPLETED
}
